// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Visit https://dbdiagram.io/d/652043ccffbf5169f031f23c for the db Diagram

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                    String         @id @default(uuid())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  email                 String         @unique
  emailVerified         DateTime?
  username              String?        @unique
  name                  String?
  image                 String?
  bio                   String?
  accounts              Account[]
  sessions              Session[]
  role                  Role           @default(USER)
  nudgesSent            Nudge[]        @relation("NudgesSent")
  nudgesReceived        Nudge[]        @relation("NudgesReceived")
  circleInvitesReceived CircleInvite[] @relation("CircleInvitesReceived")
  circleInvitesSent     CircleInvite[] @relation("CircleInvitesSent")
  notificationsSent     Notification[] @relation("sender")
  tasks                 Task[]
  circles               UserCircle[]
  notificationsReceived Notification[]

  @@index([username])
}

enum Role {
  USER
  ADMIN
}

model Circle {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  name      String
  adminId   String
  members   UserCircle[]
  invites   CircleInvite[]
}

enum CircleRole {
  MEMBER
  ADMIN
}

model UserCircle {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  circle    Circle     @relation(fields: [circleId], references: [id], onDelete: Cascade)
  circleId  String
  role      CircleRole @default(MEMBER)
  tasks     Task[]
}

model CircleInvite {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sender      User         @relation("CircleInvitesSent", fields: [senderId], references: [id])
  senderId    String
  recipient   User         @relation("CircleInvitesReceived", fields: [recipientId], references: [id])
  recipientId String
  circle      Circle       @relation(fields: [circleId], references: [id])
  circleId    String
  status      InviteStatus
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Task {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean      @default(false)
  public      Boolean      @default(false)
  consequence String?
  nudgeCount  Int          @default(0)
  nudges      Nudge[]
  tags        Tag[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  circles     UserCircle[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  tasks     Task[]
}

model Nudge {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    String   @default("You can do it âœ”")
  sender     User     @relation("NudgesSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("NudgesReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  senderId   String
  receiverId String
  taskId     String
}

model Notification {
  id         String           @id @default(uuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  sourceId   String
  sourceType String
  senderId   String?
  sender     User?            @relation("sender", fields: [senderId], references: [id])
  content    String
  type       NotificationType
  seen       Boolean          @default(false)

  @@index([userId])
}

enum NotificationType {
  TASK_DEADLINE
  NEW_NUDGE
  CIRCLE_INVITE
  FRIEND_REQUEST
}
