// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Visit https://dbdiagram.io/d/652043ccffbf5169f031f23c for the db Diagram
generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  email          String         @unique
  emailVerified  DateTime?
  username       String?        @unique
  name           String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Role           @default(USER)
  nudgesSent     Nudge[]        @relation("NudgesSent")
  nudgesReceived Nudge[]        @relation("NudgesReceived")
  notifications  Notification[]
  tasks          Task[]
  circles        UserCircle[]
}

enum Role {
  USER
  ADMIN
}

model Circle {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String
  members   UserCircle[]
  tasks     Task[]
}

model UserCircle {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  circle    Circle     @relation(fields: [circleId], references: [id], onDelete: Cascade)
  circleId  String
  role      CircleRole @default(MEMBER)
}

enum CircleRole {
  MEMBER
  ADMIN
}

model Task {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus  @default(PENDING)
  privacy     TaskPrivacy @default(PRIVATE)
  consequence String?
  nudges      Nudge[]
  tags        TaskTag[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  circle      Circle?     @relation(fields: [circleId], references: [id], onDelete: SetNull)
  circleId    String?
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum TaskPrivacy {
  PRIVATE
  PUBLIC
  CIRCLE
}

model Tag {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  tasks     TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
}

model Nudge {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    String?
  sender     User     @relation("NudgesSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("NudgesReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  senderId   String
  receiverId String
  taskId     String
}

model Notification {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  TASK_DEADLINE
  NEW_NUDGE
}
