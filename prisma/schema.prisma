// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Visit https://dbdiagram.io/d/652043ccffbf5169f031f23c for the db Diagram
generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  email          String         @unique
  username       String?        @unique
  name           String?
  password       String
  imageUrl       String
  role           Role           @default(USER)
  nudgesSent     Nudge[]        @relation("NudgesSent")
  nudgesReceived Nudge[]        @relation("NudgesReceived")
  notifications  Notification[]
  tasks          Task[]
  circles        UserCircle[]
}

enum Role {
  USER
  ADMIN
}

model AccountabilityCircle {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String
  members   UserCircle[]
  tasks     Task[]
}

model UserCircle {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User                 @relation(fields: [userId], references: [id])
  userId    String
  circle    AccountabilityCircle @relation(fields: [circleId], references: [id])
  circleId  String
  role      CircleRole           @default(MEMBER)
}

enum CircleRole {
  MEMBER
  ADMIN
}

model Task {
  id          Int                   @id @default(autoincrement())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus            @default(PENDING)
  privacy     TaskPrivacy           @default(PRIVATE)
  consequence String?
  nudges      Nudge[]
  tags        TaskTag[]
  user        User                  @relation(fields: [userId], references: [id])
  userId      String
  circle      AccountabilityCircle? @relation(fields: [circleId], references: [id])
  circleId    String?
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum TaskPrivacy {
  PRIVATE
  PUBLIC
  CIRCLE
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  tags      TaskTag[]
}

model TaskTag {
  taskId Int
  tagId  Int
  task   Task @relation(fields: [taskId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([taskId, tagId])
}

model Nudge {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  message    String?
  sender     User     @relation("NudgesSent", fields: [senderId], references: [id])
  receiver   User     @relation("NudgesReceived", fields: [receiverId], references: [id])
  task       Task     @relation(fields: [taskId], references: [id])
  senderId   String
  receiverId String
  taskId     Int
}

model Notification {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  content   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  TASK_DEADLINE
  NEW_NUDGE
}
